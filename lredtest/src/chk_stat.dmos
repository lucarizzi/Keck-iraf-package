
int procedure	chk_stat (x, y, full_check)

real	x, y
int	full_check

real	r

begin
	r = sqrt (x*x + y*y)

# Is object within 10 arcmin radius?
	if (r > 600.)
		return (NO)

# inner edge of mask
	if (y < YMSKMIN)
		return (NO)

# outer edge of mask
	if (y > YMSKMAX)
		return (NO)

# outer edge of mask
	if (x > XUPP_LIM || x < XLOW_LIM)
		return (NO)

# cut corner
	if (x > -0.98273 * y + 833.0)
		return (NO)

	if (full_check == NO)
		return (YES)		# OK to put slit there

# within radius of camera obscuration/vignetting?
	if (x*x+(y-YCAMCEN)**2 < RADVIGN**2)
		return (NO)
	

# near gaps in mosaic?
# XXX needs definition;  things like this should be contained in defines and
# limits (how close) in parameters
#	if (abs (x+250.) < 4. || abs (x) < 4. || abs(x-250.) < 4.)

	if (abs (x-GAP1CEN) < GAP1HWD)
		return (NO)
	if (abs (x-GAP2CEN) < GAP2HWD)
		return (NO)
	if (abs (x-GAP3CEN) < GAP3HWD)
		return (NO)

# appears OK...
	return (YES)
end



#
# METAL_CHECK:  Checks to make sure metal limits are not violated.  Fairly
# temporary and filled with hardcodes

procedure	metal_check (sdat, nslit)

pointer	sdat
int	nslit

int	i
real	xmin, xmax, ymin, ymax

begin
	do i = 0, nslit-1 {

		xmin = min (XMM1(sdat,i), XMM4(sdat,i))
		xmax = max (XMM2(sdat,i), XMM3(sdat,i))

		ymin = min (YMM1(sdat,i), YMM2(sdat,i))
		ymax = max (YMM4(sdat,i), YMM4(sdat,i))

		if (xmin < -373.) {
			call eprintf ("slit=%d; xmin=%6f \n")
				call pargi (i)
				call pargr (xmin)
			call fatal (0, "xmin < -373.")
		}

		if (xmax > 373.) {
			call eprintf ("slit=%d; xmax=%6f \n")
				call pargi (i)
				call pargr (xmax)
			call fatal (0, "xmax > 373.")
		}

# XXX should check for guide stars here
#		if (ymin < 2.) {
#			call eprintf ("slit=%d; ymin=%6f \n")
#				call pargi (i)
#				call pargr (ymin)
#			call fatal (0, "ymin < 2.")
#		}

		if (ymax > 225.17) {
			call eprintf ("slit=%d; ymax=%6f \n")
				call pargi (i)
				call pargr (ymax)
			call fatal (0, "ymax > 225.17")
		}

# y+x < 490.
		if (XMM3(sdat,i)+YMM3(sdat,i) > 496.) {
			call eprintf ("offending slit = %d \n")
				call pargi (i)
			call fatal (0, "beyond cut edge!")
		}

	}
end

